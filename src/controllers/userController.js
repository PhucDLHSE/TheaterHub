const pool = require('../config/db');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const { sendVerificationEmail, sendResetPasswordEmail } = require('../services/emailService');

// L·∫•y danh s√°ch t·∫•t c·∫£ user (admin)
const getAllUsers = async (req, res) => {
  try {
    const [users] = await pool.query('SELECT user_id, name, email, phone, role, avatar, is_locked FROM users');
    res.json({ success: true, users });
  } catch (error) {
    console.error('‚ùå L·ªói getAllUsers:', error);
    res.status(500).json({ success: false, message: 'L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng' });
  }
};

// T√¨m ki·∫øm user (by name ho·∫∑c email, admin)
const searchUsers = async (req, res) => {
  const { query } = req.query;
  try {
    const [users] = await pool.query(
      'SELECT user_id, name, email, phone, role, avatar, is_locked FROM users WHERE name LIKE ? OR email LIKE ?',
      [`%${query}%`, `%${query}%`]
    );
    res.json({ success: true, users });
  } catch (error) {
    console.error('‚ùå L·ªói searchUsers:', error);
    res.status(500).json({ success: false, message: 'L·ªói server khi t√¨m ki·∫øm ng∆∞·ªùi d√πng' });
  }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
const getCurrentUser = async (req, res) => {
  try {
    const userId = req.user.user_id;

    console.log('üîç ƒêang truy v·∫•n user_id =', userId);

    const [rows] = await pool.query(
      'SELECT user_id, name, email, phone, role, avatar, is_locked FROM users WHERE user_id = ?',
      [userId]
    );

    console.log('‚úÖ Query ho√†n t·∫•t:', rows);

    if (rows.length === 0) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    res.json({ success: true, user: rows[0] });
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

// L·∫•y th√¥ng tin user
const getUserById = async (req, res) => {
  const { id } = req.params;
  try {
    const [users] = await pool.query('SELECT user_id, name, email, phone, role, avatar, is_locked FROM users WHERE user_id = ?', [id]);
    if (users.length === 0) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }
    res.json({ success: true, user: users[0] });
  } catch (error) {
    console.error('‚ùå L·ªói getUserById:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin user
const updateUser = async (req, res) => {
  const { id } = req.params;
  const { name, phone, avatar } = req.body;
  try {
    await pool.query('UPDATE users SET name = ?, phone = ?, avatar = ? WHERE user_id = ?', [name, phone, avatar, id]);
    res.json({ success: true, message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói updateUser:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
const updateProfile = async (req, res) => {
  const userId = req.user.user_id;
  const { name, phone, avatar } = req.body;

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE user_id = ?', [userId]);
    if (rows.length === 0) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    const user = rows[0];

    // N·∫øu l√† t√†i kho·∫£n Google OAuth ‚Üí ch·ªâ cho ph√©p c·∫≠p nh·∫≠t phone
    if (!user.password) {
      if (!phone) {
        return res.status(400).json({ success: false, message: 'T√†i kho·∫£n Google ch·ªâ ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i' });
      }

      await pool.query('UPDATE users SET phone = ? WHERE user_id = ?', [phone, userId]);
      return res.json({ success: true, message: 'C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng', phone });
    }

    // N·∫øu l√† t√†i kho·∫£n th√¥ng th∆∞·ªùng ‚Üí name, phone, avatar
    await pool.query('UPDATE users SET name = ?, phone = ?, avatar = ? WHERE user_id = ?', [name, phone, avatar, userId]);
    res.json({ success: true, message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói updateProfile:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};


// ƒê·ªïi m·∫≠t kh·∫©u
const changePassword = async (req, res) => {
  const userId = req.user.user_id;
  const { oldPassword, newPassword } = req.body;
  if (!oldPassword || !newPassword) {
    return res.status(400).json({ success: false, message: 'Thi·∫øu m·∫≠t kh·∫©u c≈© ho·∫∑c m·ªõi' });
  }

  try {
    const [rows] = await pool.query('SELECT password FROM users WHERE user_id = ?', [userId]);
    const user = rows[0];
    if (!user || !user.password) return res.status(400).json({ success: false, message: 'T√†i kho·∫£n kh√¥ng h·ª£p l·ªá' });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) return res.status(401).json({ success: false, message: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng' });

    const hashed = await bcrypt.hash(newPassword, 10);
    await pool.query('UPDATE users SET password = ? WHERE user_id = ?', [hashed, userId]);

    res.json({ success: true, message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói changePassword:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

// Qu√™n m·∫≠t kh·∫©u (G·ª≠i OTP)
const forgotPassword = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ success: false, message: 'Thi·∫øu email' });

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
    if (rows.length === 0) return res.status(404).json({ success: false, message: 'Email ch∆∞a ƒëƒÉng k√Ω' });

    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
    const expiredAt = new Date(Date.now() + 10 * 60 * 1000);

    await pool.query('INSERT INTO email_verifications (user_id, verification_code, expired_at) VALUES (?, ?, ?)', [
      rows[0].user_id, otpCode, expiredAt
    ]);

    await sendResetPasswordEmail(email, otpCode);
    res.json({ success: true, message: 'ƒê√£ g·ª≠i OTP ƒë·∫øn email' });
  } catch (error) {
    console.error('‚ùå L·ªói forgotPassword:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng OTP
const resetPassword = async (req, res) => {
  const { email, otp, newPassword } = req.body;
  if (!email || !otp || !newPassword)
    return res.status(400).json({ success: false, message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt' });

  try {
    const [users] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
    if (users.length === 0)
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    const user = users[0];
    const [otpRows] = await pool.query(
      `SELECT * FROM email_verifications WHERE user_id = ? AND verification_code = ? AND is_used = FALSE AND expired_at > NOW()`,
      [user.user_id, otp]
    );

    if (otpRows.length === 0)
      return res.status(400).json({ success: false, message: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n' });

    const hashed = await bcrypt.hash(newPassword, 10);
    await pool.query('UPDATE users SET password = ? WHERE user_id = ?', [hashed, user.user_id]);
    await pool.query('UPDATE email_verifications SET is_used = TRUE WHERE verification_code = ?', [otp]);

    res.json({ success: true, message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói resetPassword:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

// Kh√≥a/M·ªü t√†i kho·∫£n (admin)
const lockUser = async (req, res) => {
  const { id } = req.params;
  const { locked } = req.body;

  if (typeof locked !== 'boolean') {
    return res.status(400).json({ success: false, message: 'Gi√° tr·ªã locked ph·∫£i l√† true ho·∫∑c false' });
  }

  try {
    await pool.query('UPDATE users SET is_locked = ? WHERE user_id = ?', [locked, id]);
    res.json({ success: true, message: locked ? 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a' : 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a' });
  } catch (error) {
    console.error('‚ùå L·ªói lockUser:', error);
    res.status(500).json({ success: false, message: 'L·ªói server khi kh√≥a t√†i kho·∫£n' });
  }
};

// C·∫≠p nh·∫≠t vai tr√≤ c·ªßa ng∆∞·ªùi d√πng (admin)
const updateUserRole = async (req, res) => {
  const userId = req.params.id;
  const { role } = req.body;

  const validRoles = ['customer', 'staff', 'admin']; 
  if (!validRoles.includes(role)) {
    return res.status(400).json({ success: false, message: 'Role kh√¥ng h·ª£p l·ªá' });
  }

  try {
    const [result] = await pool.query('UPDATE users SET role = ? WHERE user_id = ?', [role, userId]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    res.json({ success: true, message: 'C·∫≠p nh·∫≠t role th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t role:', err);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};


module.exports = {
  getAllUsers,
  searchUsers,
  getCurrentUser,
  getUserById,
  updateUser,
  updateProfile,
  changePassword,
  forgotPassword,
  resetPassword,
  lockUser,
  updateUserRole
};
