const pool = require("../config/db");
const { payOS } = require("../utils/payos");
const { sendTicketEmail } = require('../services/emailService');
const dayjs = require('dayjs');

const createPaymentLink = async (req, res) => {
  const user_id = req.user.user_id;
  const { order_id } = req.body;
  try {
    const [[order]] = await pool.query(`
      SELECT o.order_id, o.total_amount, e.title AS event_title
      FROM ticket_orders o
      JOIN events e ON o.event_id = e.event_id
      WHERE o.order_id = ? AND o.user_id = ?
    `, [order_id, user_id]);

    if (!order) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
    }

    const description = `Thanh to√°n: ${order.event_title}`;
    const truncatedDescription = description.length > 25
     ? description.slice(0, 25)
     : description;

    const paymentRequest = {
      orderCode: order.order_id,
      amount: parseInt(order.total_amount),
      description: truncatedDescription,
      returnUrl: "https://theaterhub.vn/thanh-toan/thanh-cong",
      cancelUrl: "https://theaterhub.vn/thanh-toan/that-bai"
    };

    const paymentLink = await payOS.createPaymentLink(paymentRequest);

    res.json({ success: true, paymentLink });
  } catch (error) {
    console.error("‚ùå L·ªói createPaymentLink:", error?.response?.data || error);
    res.status(500).json({ success: false, message: "L·ªói khi t·∫°o link thanh to√°n" });
  }
};

const handlePayOSWebhook = async (req, res) => {
  try {
    const data = req.body.data;
    console.log("üì© Webhook PayOS:", data);

    // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng
    if (data.code === "00" || data.status === "PAID") {
      const orderId = data.orderCode;

      // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n t·ª´ 'reserved' -> 'paid'
      const [orderResult] = await pool.query(
        `UPDATE ticket_orders SET status = 'paid' WHERE order_id = ? AND status = 'reserved'`,
        [orderId]
      );

      // N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t (vd: ƒë√£ l√† 'paid' ho·∫∑c sai m√£)
      if (orderResult.affectedRows === 0) {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng c·∫ßn c·∫≠p nh·∫≠t ho·∫∑c ƒë√£ thanh to√°n: order_id = ${orderId}`);
        return res.status(200).json({ success: false, message: "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ thanh to√°n" });
      }

      // 2. C·∫≠p nh·∫≠t t·∫•t c·∫£ v√© trong ƒë∆°n th√†nh 'paid'
      await pool.query(
        `UPDATE tickets SET status = 'paid' WHERE order_id = ?`,
        [orderId]
      );

      // 3. Tr·ª´ s·ªë l∆∞·ª£ng v√© theo ticket_type (n·∫øu c√≥)
      const [ticketTypeCounts] = await pool.query(`
        SELECT ticket_type_id, COUNT(*) AS count
        FROM tickets
        WHERE order_id = ? AND ticket_type_id IS NOT NULL
        GROUP BY ticket_type_id
      `, [orderId]);

      for (const row of ticketTypeCounts) {
        await pool.query(`
          UPDATE ticket_types
          SET quantity = GREATEST(quantity - ?, 0)
          WHERE ticket_type_id = ?
        `, [row.count, row.ticket_type_id]);
      }

      // 4. G·ª≠i email v√© cho ng∆∞·ªùi d√πng
      const [rows] = await pool.query(`
  SELECT u.email, e.title AS event_title, l.name AS location_name, 
         s.start_time, tt.type_name AS ticket_type_name, COUNT(t.ticket_id) AS quantity,
         SUM(t.price) AS total_price
  FROM tickets t
  JOIN users u ON t.user_id = u.user_id
  JOIN showtimes s ON t.showtime_id = s.showtime_id
  JOIN events e ON s.event_id = e.event_id
  JOIN locations l ON s.location_id = l.location_id
  LEFT JOIN ticket_types tt ON t.ticket_type_id = tt.ticket_type_id
  WHERE t.order_id = ?
  GROUP BY u.email, e.title, l.name, s.start_time, tt.type_name
  LIMIT 1
`, [orderId]);
        
        
        const ticketInfo = rows[0];
        console.log("üì¶ ticketInfo raw:", ticketInfo);
        console.log("üìß email:", ticketInfo?.email);
        
      if (ticketInfo && ticketInfo.email) {
        await sendTicketEmail(ticketInfo.email, {
        eventTitle: ticketInfo.event_title,
        showtime: dayjs(ticketInfo.start_time).format('HH:mm DD/MM/YYYY'),
        locationName: ticketInfo.location_name,
        ticketTypeName: ticketInfo.ticket_type_name || 'V√© s·ª± ki·ªán',
        quantity: ticketInfo.quantity,
        totalAmount: ticketInfo.total_price,
        qrCodeUrl: `https://yourdomain.com/qr/${orderId}`
      });
        console.log(`üì® ƒê√£ g·ª≠i email v√© t·ªõi ${ticketInfo.email}`);
      } else {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin email ƒë·ªÉ g·ª≠i v√©:', ticketInfo);
      }
      console.log('üéüÔ∏è Th√¥ng tin v√© l·∫•y ƒë∆∞·ª£c:', ticketInfo);
      console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω webhook cho order_id = ${orderId}`);
      return res.status(200).json({ success: true, message: "Thanh to√°n th√†nh c√¥ng, ƒë√£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng" });
    }

    // Kh√¥ng x·ª≠ l√Ω tr·∫°ng th√°i kh√°c
    return res.status(200).json({ success: false, message: "Kh√¥ng ph·∫£i tr·∫°ng th√°i ƒë√£ thanh to√°n" });

  } catch (err) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω webhook:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi x·ª≠ l√Ω webhook" });
  }
};


module.exports = {
  createPaymentLink,
  handlePayOSWebhook
};
